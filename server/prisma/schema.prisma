generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String
  isSeller     Boolean  @default(false)
  isRenter     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  listings     Listing[]
  likes        Like[]
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  sentOffers       Offer[]   @relation("OfferSender")
  receivedOffers   Offer[]   @relation("OfferReceiver")

  @@map("users")
}

model Listing {
  id            String   @id @default(cuid())
  userId        String
  title         String
  description   String
  price         Float
  location      String
  startDate     DateTime
  endDate       DateTime
  imageUrls     String[]
  contactMethod String   // "email" or "in_app"
  summary       String?  // AI-generated summary
  tags          String[] // AI-generated tags
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         Like[]
  messages      Message[]
  offers        Offer[]

  @@map("listings")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@map("likes")
}

model Message {
  id         String   @id @default(cuid())
  listingId  String
  senderId   String
  receiverId String
  content    String
  timestamp  DateTime @default(now())

  // Relations
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Offer {
  id         String   @id @default(cuid())
  listingId  String
  fromUserId String
  toUserId   String
  amount     Float
  message    String
  status     String   @default("pending") // "pending", "accepted", "rejected"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  fromUser   User     @relation("OfferSender", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User     @relation("OfferReceiver", fields: [toUserId], references: [id], onDelete: Cascade)

  @@map("offers")
} 